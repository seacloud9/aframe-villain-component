!function(a){function t(i){if(e[i])return e[i].exports;var d=e[i]={exports:{},id:i,loaded:!1};return a[i].call(d.exports,d,d.exports,t),d.loaded=!0,d.exports}var e={};return t.m=a,t.c=e,t.p="",t(0)}([function(t,e){if("undefined"==typeof AFRAME)throw new Error("Component attempted to register before AFRAME was available.");AFRAME.registerComponent("villain",{schema:{cam:{default:null},aispeed:{default:.5},camID:{default:"#camera"},lastRandomX:{default:Math.random()},lastRandomZ:{default:Math.random()},mapRef:{default:[[1,1,1,1,1,1,1,1,1,1],[1,1,0,0,0,0,0,1,1,1],[1,1,0,0,2,0,0,0,0,1],[1,0,0,0,0,2,0,0,0,1],[1,0,0,2,0,0,2,0,0,1],[1,0,0,0,2,0,0,0,1,1],[1,1,1,0,0,0,0,1,1,1],[1,1,1,0,0,1,0,0,1,1],[1,1,1,1,1,1,0,0,1,1],[1,1,1,1,1,1,1,1,1,1]]},health:{default:100},mapX:{default:null},pathPos:{default:1},mapY:{default:null},x:{default:null},y:{default:null},z:{default:null},delta:{default:0},MOVESPEED:{default:10},hasLoaded:{default:!1},sceneHasLoaded:{default:!1},mapW:{default:10},mapH:{default:10},offsetX:{default:-220},offsetZ:{default:-100},UNITSIZE:{default:250},WALLHEIGHT:{default:250/3},collisionDistance:{default:25},collisionAction:{default:null},isColliding:{default:!1},escapeProbability:{default:.5},loot:{default:null},gold:{default:10},specialMessaging:{default:null},specialAbilities:{default:null},pauseForAction:{default:!1}},multiple:!0,init:function(){this.data.sceneHasLoaded?this.sceneHasLoaded.apply(this):document.querySelector("a-scene").addEventListener("loaded",this.sceneHasLoaded.bind(this))},checkWallCollision:function(a){const t=this.getMapSector(a);return this.data.mapRef[t.x][t.z]>0},sceneHasLoaded:function(){this.data.scene=document.querySelector("a-scene"),null==this.data.aispeed&&(this.data.aispeed=this.data.delta*this.data.MOVESPEED),null===this.data.mapRef&&(this.data.mapRef=document.getElementById("maze").components["aframe-maze"].data.map),null==this.data.cam&&(this.data.cam=document.querySelector(this.data.camID));const a=this.getMapSector(this.data.cam.object3D.position);do this.data.x=this.getRandBetween(0,this.data.mapW-1),this.data.z=this.getRandBetween(0,this.data.mapH-1);while(this.data.mapRef[this.data.x][this.data.z]>0||this.data.x==a.x&&this.data.z==a.z);this.data.x=Math.floor(this.data.x-this.data.mapW/2)*this.data.UNITSIZE,this.data.z=Math.floor(this.data.z-this.data.mapW/2)*this.data.UNITSIZE,this.data.hasLoaded=!0},getRandBetween:function(a,t){return parseInt(Math.floor(Math.random()*(t-a+1))+a,10)},getMapSector:function(a){const t=Math.floor((a.x+this.data.UNITSIZE/2)/this.data.UNITSIZE+this.data.mapW/2),e=Math.floor((a.z+this.data.UNITSIZE/2)/this.data.UNITSIZE+this.data.mapW/2);return{x:t,z:e}},update:function(a){},distance:function(a,t,e,i){return Math.sqrt((e-a)*(e-a)+(i-t)*(i-t))},tick:function(t,e){if(this.data.delta=e,this.data.time=t,this.data.hasLoaded){this.data.health<=0&&this.data.scene.remove(a);var i=Math.random();i>.995&&(this.data.lastRandomX=2*Math.random()-1,this.data.lastRandomZ=2*Math.random()-1),this.el.object3D.translateX(this.data.aispeed*this.data.lastRandomX),this.el.object3D.translateZ(this.data.aispeed*this.data.lastRandomZ);var d=this.getMapSector(this.el.object3D.position);this.distance(d.x,d.z,this.data.cam.object3D.position.x,this.data.cam.object3D.position.z)<this.data.collisionDistance&&!this.data.pauseForAction?(this.data.isColliding=!0,this.data.collisionAction&&(this.data.pauseForAction=!0,this.data.collisionAction())):this.data.isColliding=!1,(d.x<0||d.x>=this.data.mapW||d.y<0||d.y>=this.data.mapH||this.checkWallCollision(this.el.object3D.position))&&(this.el.object3D.translateX(-2*this.data.aispeed*this.data.lastRandomX),this.el.object3D.translateZ(-2*this.data.aispeed*this.data.lastRandomZ),this.data.lastRandomX=2*Math.random()-1,this.data.lastRandomZ=2*Math.random()-1),(d.x<-1||d.x>this.data.mapW||d.z<-1||d.z>this.data.mapH)&&this.data.scene.remove(a);this.getMapSector(this.data.cam.object3D.position)}},remove:function(){},pause:function(){},play:function(){}})}]);